@{
    ViewData["Title"] = "Test Ledger Hardware Wallet";
}
<h2>@ViewData["Title"]</h2>
<h3>@ViewData["Message"]</h3>

<script src="~/ledger.js"></script>
<script>
	var dash;
	function ledgerGetAddress() {
		$("#response").css("color", "black").text("Initializing Ledger Hardware Wallet .. make sure it is unlocked, in the DASH app and your browser settings are enabled!");
		ledger.comm_u2f.create_async().then(function (comm) {
			dash = new ledger.btc(comm);
			dash.getWalletPublicKey_async("44'/5'/0'/0/0").then(
				function (result) {
					var address = result.bitcoinAddress;
					document.getElementById("response").innerHTML = "Successfully connected to Ledger Hardware Wallet: " + address;
				}).catch(
				function (error) {
					$("#response").css("color", "red").html(
						"Error connecting to Ledger Hardware Wallet: " + getLedgerErrorText(error) + "<br />" +
						"Please check the <a href='/AboutLedgerHardwareWallet'>Ledger Hardware Wallet Guide</a> for more help.");
				});
		});
	}
	function getLedgerErrorText(error) {
		//https://github.com/kvhnuke/etherwallet/issues/336
		if (error === "Invalid status 6985")
			return "User denied the transaction on the hardware device (or the tx is invalid and was rejected before showing up), aborting!";
		else if (error === "Invalid status 6a80")
			return "Invalid status 6a80: Usually means contract data is not enabled on the device, but more likely the data is not in a correct format and was rejected by the hardware device.";
		var errorText = error.errorCode ? "Unknown error, error code=" + error.errorCode : error;
		if (errorText === "No device found")
			errorText = "No device found. Make sure to connect a device and unlock it.";
		else if (error === "Invalid status 6804")
			errorText =
				"Security Exception. This means an invalid BIP32 path was provided. Do you have hardening in the right places?";
		else if (errorText === "Invalid status 6982")
			errorText = "Device timed out or is locked again. Please re-enter pin on the device.<br/>";
		else if (error.errorCode === 2)
			errorText =
				"Error code = 2. Not running in secure context (must be https), unable to connect to Ledger.<br/>https://github.com/LedgerHQ/ledger-node-js-api/issues/32";
		else if (error.errorCode === 4)
			errorText =
				"Error code = 4. Dash app is not open on Ledger. Please open the Dash app with <b>Browser support</b> enabled to continue.";
		else if (error.errorCode === 5)
			errorText = "Error code = 5. Browser support not enabled, unable to connect to Ledger Hardware.<br/>" +
				"Is your Ledger unlocked and is the <b>Dash</b> app open with <b>Browser support</b> enabled in Settings?";
		else if (error.errorCode === 400)
			errorText =
				"Error code = 400. Please update your hardware device, seems like an error occurred while updating. https://ledger.zendesk.com/hc/en-us/articles/115005171225-Error-Code-400";
		return errorText;
	}
	function ledgerGenerateTransaction() {
		$("#response").css("color", "black").text("Creating raw transaction ..");

		//lets go throguh it step by step:
		//we start with 0.1mDASH: https://explorer.dash.org/address/XtW8VbHnnZ2Gv3gwyWCngZBaNY3rBVLbpo
		//which gives us utxo via: https://explorer.dash.org/chain/Dash/unspent/XtW8VbHnnZ2Gv3gwyWCngZBaNY3rBVLbpo
		//https://explorer.dash.org/tx/7fbbceeea88cebeff25137bcea4ae182547e306c213be4c7837e211c2004bfc7#o0
		//Now we need the rawtx (sadly the format is different):
		//https://explorer.dash.org/rawtx/7fbbceeea88cebeff25137bcea4ae182547e306c213be4c7837e211c2004bfc7
		//on dash node we get: 010000000278efa81dcfe3e7fd7b754f3c096b584ffe0c3313bd704b04daa66b7c95398734000000006a47304402202b8516407850998a20c70f1d7cf3cd423b089bf69338d3ef92509ad8ccb65521022055729869b70d04a7f9c57d599dd8806bae5c3b879a32bc2dbf8d4845f80913cc01210369680f9fc0b65ce54d531ac2a079a8dcae83e0e42ef9f8979f62dd8e31585f22feffffff6ee21a389f1670c1c4bc2a1adadcf7d855c4304e312e1380df41b658fd86b242000000006a47304402205791cb8ad65a8d0bf52607a7ad0beecfd375fd06dfef65294057ef4971a2897102203965a18de660076af05628dc28f866e549f34038687bceb84cbd2edeff7ccac201210342ac61183ba5169fba337d41749affe7957de441a7341b84f68b150961b4229bfeffffff0210270000000000001976a914c36b98b0349b0d7b633299d6ec8c29521b99329c88ac01b81100000000001976a914b19950ebf06d29e4b97f9f592c247fef536d71f188ac9c3c0c00
		var utxosTextWithOutputIndices = "7fbbceeea88cebeff25137bcea4ae182547e306c213be4c7837e211c2004bfc7|0|";
		var txOutputIndexToUse = [0];
		var addressIndex = 0;
		var amountToSend = 0.00009;
		var useInstantSend = false;
		var usePrivateSend = false;
		var toAddress = "XvHR2v53PyUMTnXgX9wBmw8N4WstZT92xG";
		var txFee = (0.00078 + 0.00148 * 1)/1000;
		var remainingDash = 0.00001 - txFee;
		var remainingAddress = "Xv1Tfr7aFwfSsaYkTMtVe3nBK6XsWgtiFy";
		$.getJSON("/GenerateRawTx?utxos=" + utxosTextWithOutputIndices + "&amountToAddress=" + amountToSend + "|" + toAddress + "&remainingAmountToAddress=" + remainingDash + "|" + remainingAddress).done(
		function (data) {
			var txHashes = data["txHashes"];
			var rawtx = data["rawtx"];
			console.log("txHashes: %O", txHashes);
			console.log("rawtx: %O", rawtx);
			var txs = [];
			var addressPaths = [];
			for (var i = 0; i < txHashes.length; i++) {
				var parsedTx = dash.splitTransaction(txHashes[i]);
				console.log("parsed tx " + i + ": %O", parsedTx);
				if (!parsedTx.inputs || parsedTx.inputs.length === 0) {
					$("#response").css("color", "red").text("Empty broken raw tx inputs, unable to continue");
					return;
				}
				txs.push([parsedTx, txOutputIndexToUse[i]]);
				console.log("address path: 44'/5'/0'/0/" + addressIndex);
				addressPaths.push("44'/5'/0'/0/" + addressIndex);
			}
			var parsedRawtx = dash.splitTransaction(rawtx);
			console.log("parsedRawtx: %O", parsedRawtx);
			if (!parsedRawtx || parsedRawtx.outputs.length === 0) {
				$("#response").css("color", "red").text("Empty broken raw tx outputs, unable to continue");
				return;
			}
			var outputScript = dash.serializeTransactionOutputs(parsedRawtx).toString('hex');
			console.log("outputScript: %O", outputScript);
			if (!outputScript) {
				$("#response").css("color", "red").text("Empty broken raw tx output script, unable to continue");
				return;
			}
			// Sign on hardware (specifying the change address helps with getting rid of change output confirmation)
			// Still requires 2 confirmation, first the external output address and then the transaction+fee
			dash.createPaymentTransactionNew_async(txs, addressPaths, "44'/5'/0'/0/3", outputScript).then(
				function (signedTx) {
					console.log("signed tx %O", signedTx);
					/*TODO
					$.get("/SendSignedTx?signedTx=" + signedTx + "&instantSend=" + useInstantSend,
						function (finalTx) {
							$("#response").css("color", "black")
								.html("Successfully signed transaction and broadcasted it to the Dash network now " +
								"(you can see the transaction in a few minutes in any Dash explorer): <a href='https://explorer.dash.org/tx/" + finalTx+"'>"+finalTx+"</a>");
						}).fail(function (jqxhr) {
							$("#response").css("color", "red").text("Server Error: " + jqxhr.responseText);
						});
					*/
				}).catch(function (error) {
					$("#response").css("color", "red").html(getLedgerErrorText(error));
				});
		}).fail(function (jqxhr) {
			$("#response").css("color", "red").text("Server Error: " + jqxhr.responseText);
		});
		/*TODO: integrate rest
		//looks to be way too much work with js and the crappy libraries, maybe just create raw tx on server side and just send it back for
		var tx1 = dash.splitTransaction(
			"010000000278efa81dcfe3e7fd7b754f3c096b584ffe0c3313bd704b04daa66b7c95398734000000006a47304402202b8516407850998a20c70f1d7cf3cd423b089bf69338d3ef92509ad8ccb65521022055729869b70d04a7f9c57d599dd8806bae5c3b879a32bc2dbf8d4845f80913cc01210369680f9fc0b65ce54d531ac2a079a8dcae83e0e42ef9f8979f62dd8e31585f22feffffff6ee21a389f1670c1c4bc2a1adadcf7d855c4304e312e1380df41b658fd86b242000000006a47304402205791cb8ad65a8d0bf52607a7ad0beecfd375fd06dfef65294057ef4971a2897102203965a18de660076af05628dc28f866e549f34038687bceb84cbd2edeff7ccac201210342ac61183ba5169fba337d41749affe7957de441a7341b84f68b150961b4229bfeffffff0210270000000000001976a914c36b98b0349b0d7b633299d6ec8c29521b99329c88ac01b81100000000001976a914b19950ebf06d29e4b97f9f592c247fef536d71f188ac9c3c0c00"
		);
		console.log("input tx1 %O", tx1);
		dash.displayTransactionDebug(tx1);
		//works, can see 10k duff=0.1mDASH amount in output 1 we wanna use

		//looks to be much simpler:
		//https://github.com/ArkEcosystem/ark-desktop/blob/master/LedgerArk.js
		//also useful:
		//https://github.com/Neufund/ledger-wallet-provider/blob/master/src/LedgerWallet.js
		//https://coranos.github.io/neo/ledger-nano-s/development/node_js.html

		//we need the output script from the rawtx, generate via node:
		//createrawtransaction '[ { "txid": "7fbbceeea88cebeff25137bcea4ae182547e306c213be4c7837e211c2004bfc7", "vout": 0 } ]' '{ "Xv1Tfr7aFwfSsaYkTMtVe3nBK6XsWgtiFy": 0.0001 }' //works in 1 confirm
		//rawtx: 0100000001c7bf04201c217e83c7e43b216c307e5482e14aeabc3751f2efeb8ca8eecebb7f0000000000ffffffff0110270000000000001976a914d3efcb09c5d3615d06d9438efe4af7d7d556880e88ac00000000

		//createrawtransaction '[ { "txid": "7fbbceeea88cebeff25137bcea4ae182547e306c213be4c7837e211c2004bfc7", "vout": 0 } ]' '{ "XoASepVfo1cegWp52HS9gbcKuarLyqxsKT": 0.00009, "XtW8VbHnnZ2Gv3gwyWCngZBaNY3rBVLbpo": 0.000009 }'
		//rawtx: 0100000001c7bf04201c217e83c7e43b216c307e5482e14aeabc3751f2efeb8ca8eecebb7f0000000000ffffffff0228230000000000001976a91488d9ce86369df69ee9fb0aa0f887c4297133bf1788ac84030000000000001976a914d3efcb09c5d3615d06d9438efe4af7d7d556880e88ac00000000
		
		//serialize it back to hex:
		var rawtx = dash.splitTransaction("0100000001c7bf04201c217e83c7e43b216c307e5482e14aeabc3751f2efeb8ca8eecebb7f0000000000ffffffff0228230000000000001976a91488d9ce86369df69ee9fb0aa0f887c4297133bf1788ac84030000000000001976a914d3efcb09c5d3615d06d9438efe4af7d7d556880e88ac00000000");
		console.log("rawtx %O", rawtx);
		var outputScript = dash.serializeTransactionOutputs(rawtx).toString('hex');
		console.log("rawtx hex " + outputScript);

		dash.createPaymentTransactionNew_async(
      [[tx1, 0]], // 1 is tx1 outputs that got into our addressindex
      ["44'/5'/0'/0/0"], // last 0 is addressindex for the tx1
			"44'/5'/0'/0/3",//undefined, //path for changeaddress, optional, not needed, we could just use last
			//instead we can simply add the change address from the tx to our list manually (or wait until it appears anyway)
			undefined, //path for changeaddress, optional, not needed, we could just use last
			//outputs, see above outputScript
			outputScript)
      .then(function(result) {
				//worked, start signing with hardware
				document.getElementById("response").innerHTML = result;
				console.log("signed tx %O", result);
				//yeah, fully works, we can push this into the dash node and the dash will be send :)
				//note: if "66: insufficient priority (code -26)" happens when broadcasting this it means our fee is too low (usually 0), make sure we use at least the minimum fee (1000duffs):
				//https://dash-docs.github.io/en/developer-guide#transaction-fees-and-change
				//0100000001c7bf04201c217e83c7e43b216c307e5482e14aeabc3751f2efeb8ca8eecebb7f000000006b483045022100ffccfcaa2f52b1a065113f1946619cf6c3149bb599bbd008a0aebd1b597bae0e02205f6ea6c627a626096a9dc0bf6bcceb3c7e75c8dd1e83bfcae288309eb97fa1c60121020e60c217c5ca3da285174e648556854f24e4383fc57ede54cab4d86240d2f77dffffffff0110270000000000001976a914d3efcb09c5d3615d06d9438efe4af7d7d556880e88ac00000000
			}).catch(function (error) {
				document.getElementById("response").innerHTML = getLedgerErrorText(error);
			});
		/*btc.signP2SHTransaction_async(
   [ [tx, 1, "52210289b4a3ad52a919abd2bdd6920d8a6879b1e788c38aa76f0440a6f32a9f1996d02103a3393b1439d1693b063482c04bd40142db97bdf139eedd1b51ffb7070a37eac321030b9a409a1e476b0d5d17b804fcdb81cf30f9b99c6f3ae1178206e08bc500639853ae"] ],
   ["0'/0/0"],
   "01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac").then(
     function(result) { console.log(result);}).catch(
     function(error) { console.log(error); });
		*/

		//tst rawTx: 0100000001c773da236484dae8f0fdba3d7e0ba1d05070d1a34fc44943e638441262a04f10010000006a473044022067eeded9267ac81dc7427be355f6283e74107d4153aa16691e3c4a057328dfc30220259d54ed196e1a2f824efd38d51c00cb1f2405f64e329eeb79e2b865336431a70121020e60c217c5ca3da285174e648556854f24e4383fc57ede54cab4d86240d2f77dffffffff01905f0100000000001976a91472a5d75c8d2d0565b656a5232703b167d50d5a2b88ac00000000

		/*probably not needed
		//mostly the same as above, but requires redeem script or each tx input: https://github.com/LedgerHQ/ledger-node-js-api/blob/master/test/testBtc3.js
		//for signing messages see: https://github.com/LedgerHQ/ledger-node-js-api/blob/master/test/testBtc4.js
		*/
	}
</script>

<button onclick="ledgerGetAddress()" style="display: inline-block;">Get Ledger DASH Address</button>
<pre id="response"></pre>

<button onclick="ledgerGenerateTransaction()" style="display: inline-block;">Generate Transaction to sign on Ledger</button>